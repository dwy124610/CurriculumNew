plugins {
    id 'org.springframework.boot' version '2.1.6.RELEASE'
    id 'java'
}

group 'com.dwy'
version '1.0-SNAPSHOT'

ext {
    springBootVersion = '2.1.6.RELEASE'
    junitVersion = '4.12'
    lombokVersion = '1.18.2'
    mybatisSpringBootVersion = '1.3.0'
    mysqllVersion = '5.1.46'
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
//	apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    sourceCompatibility = 1.8

    // 依赖版本管理
    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
            mavenBom "org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisSpringBootVersion}"
            mavenBom "junit:junit:${junitVersion}"
            mavenBom "org.projectlombok:lombok:${lombokVersion}"
            mavenBom 'com.alibaba:druid:1.1.10'
            mavenBom "mysql:mysql-connector-java:${mysqllVersion}"
        }
    }
    // 依赖仓库定义
    repositories {
        //本地
        //mavenLocal()
        //阿里云
        /*
        maven {
            credentials {username "admin";  password "admin19881109"}
            url "http://dsp.sgool.cn:8887/nexus/content/groups/public/"
        }
        */
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        mavenCentral()
    }

    // 编译环境定义
    buildscript {
        repositories {
            //本地
            //mavenLocal()
            //阿里云
            /*
            maven {
                credentials {username "admin";  password "admin19881109"}
                url "http://dsp.sgool.cn:8887/nexus/content/groups/public/"
            }
            */
            maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
            mavenCentral()
        }
//        dependencies {
//            classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
//        }
    }

    configurations.all {
        // 检查是否有更新，用于快照更新
        resolutionStrategy.cacheChangingModulesFor  0,'seconds'
    }
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

}
configurations {
    mybatisGenerator
}

dependencies {
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.4'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.46'
    mybatisGenerator 'tk.mybatis:mapper:3.3.1'

    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter'
    implementation 'mysql:mysql-connector-java:5.1.46'
    implementation 'com.alibaba:druid:1.1.10'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.projectlombok:lombok'
    implementation 'com.alibaba:fastjson:1.2.68'
    implementation 'com.google.guava:guava:23.4-jre'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'juint:junit:4.12'
}

def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/mybatis/config.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

task mybatisGenerate << {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.username")
    ant.properties['password'] = properties.getProperty("jdbc.password")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("package.model")
    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/mybatis/mybatis-generator.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}


